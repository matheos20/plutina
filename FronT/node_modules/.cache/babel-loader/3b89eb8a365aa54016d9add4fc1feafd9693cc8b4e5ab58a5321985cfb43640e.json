{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: \"http://127.0.0.1:8000/api\",\n  withCredentials: true,\n  headers: {\n    Accept: \"application/json\"\n  }\n});\n\n// Interceptor pour ajouter le token à chaque requête si présent\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  console.log(\"🔐 TOKEN PRIS EN COMPTE ?\", token);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","headers","Accept","interceptors","request","use","config","token","localStorage","getItem","console","log","Authorization","error","Promise","reject"],"sources":["D:/Matheos/laravelPlutina/FronT/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://127.0.0.1:8000/api\",\r\n    withCredentials: true,\r\n    headers: {\r\n        Accept: \"application/json\",\r\n    },\r\n});\r\n\r\n// Interceptor pour ajouter le token à chaque requête si présent\r\napi.interceptors.request.use(config => {\r\n    const token = localStorage.getItem('token');\r\n    console.log(\"🔐 TOKEN PRIS EN COMPTE ?\", token);\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACLC,MAAM,EAAE;EACZ;AACJ,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,KAAK,CAAC;EAC/C,IAAIA,KAAK,EAAE;IACPD,MAAM,CAACL,OAAO,CAACW,aAAa,GAAG,UAAUL,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EAAEO,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAEF,eAAehB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}